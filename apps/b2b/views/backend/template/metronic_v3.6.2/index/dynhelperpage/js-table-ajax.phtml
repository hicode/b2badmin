<?php
$di = Phalcon\DI::getDefault();
$assetspath = $di->controller_params_array['template']['template_admin_path_assets'];
$mainurl_for_data = MyCustomHelperPages::makePage(CHCrmCConstantsPages::CONST_PAGES_ADMIN_DYNPAGE_HELPERPAGE_PARAM2, array('helperpage' => $di->controller_params_array['settings']['Helper_Page_Data_Table_Ajax_Page'], 'param1' => $di->controller_params_array['viewarr']['pageurl']));
$mainurl_for_data_details = MyCustomHelperPages::makePage(CHCrmCConstantsPages::CONST_PAGES_ADMIN_DYNPAGE_HELPERPAGE_PARAM2, array('helperpage' => $di->controller_params_array['settings']['Helper_Page_Data_Table_Ajax_Page'], 'param1' => $di->controller_params_array['viewarr']['pageurl'] . '_details', 'param2' => $di->controller_params_array['settings']['Action_View']));
//'/'.$di->controller_params_array['lng'].'/b2b/admin/dynhelperpage/'.$di->controller_params_array['settings']['Helper_Page_Data_Table_Ajax_Page'].'/'.$di->controller_params_array['viewarr']['pageurl'].'/';
?>
//<script>
    function handleActionRowTab(alertdivid, msg)
    {
        Metronic.alert({container: alertdivid,
            place: "append",
            type: "success",
            message: msg,
            close: 1,
            reset: 1,
            focus: 1,
            closeInSeconds: 5,
            icon: "warning",
        });
    }
    function getData2(lngid, id, callback) {
        $.ajax({
            url: "<?php echo $mainurl_for_data_details; ?>",
            type: "POST",
            dataType: "json",
            async: true,
            data: {
                lngid: lngid,
                dataID: id
            },
            success: function (result) {
                callback(result);
            },
            error: function () {
                alert('Error fetching table tpl_2');
                callback('<tr class="custom-details"><td class="custom-details" colspan="10" style="outline: 3px solid grey;">ERROR</td></tr>');
            }
        });
    }

    function enableForm(tab, nav_tab)
    {
        tab.find('input[type="checkbox"]').addClass('custom-hide').removeAttr('disabled');
        tab.find('input[readonly]').addClass('custom-hide').removeAttr('readonly');
        tab.find('input.date-picker').addClass('custom-hide').removeAttr('disabled');
        tab.find('select.bs-select').addClass('custom-hide').removeAttr('disabled');
        //tab.find('.bootstrap-switch-readonly').addClass('custom-hidebootstrap').removeClass('bootstrap-switch-readonly');
        tab.find('input.customswitch').bootstrapSwitch('disabled', false);
        Metronic.unblockUI(nav_tab);
        ComponentsPickers.init();
        tab.find(".form_datetime").datetimepicker('enable');
        tab.find(".input-group-btn").show();
    }

    function disableForm(tab, nav_tab)
    {
        tab.find('input[type="checkbox"].custom-hide').attr('disabled', 'disabled').removeClass('custom-hide');
        tab.find('input.custom-hide').attr('readonly', true).removeClass('custom-hide');
        tab.find('input.date-picker').attr('disabled', 'disabled').removeClass('custom-hide');
        tab.find('select.bs-select.custom-hide').attr('disabled', 'disabled').removeClass('custom-hide');
        tab.find('input.customswitch').bootstrapSwitch('disabled', true);
        Metronic.unblockUI(nav_tab);
        ComponentsPickers.init();
        tab.find(".form_datetime").datetimepicker('disable');
        tab.find(".input-group-btn").hide();
    }

    function disableRow(row)
    {
        row.find('input[type="checkbox"].custom-hide').attr('disabled', 'disabled').removeClass('custom-hide');
        row.find('input.custom-hide').attr('readonly', true).removeClass('custom-hide');
        row.find('input.date-picker').attr('disabled', 'disabled').removeClass('custom-hide');
        row.find('select.bs-select.custom-hide').attr('disabled', 'disabled').removeClass('custom-hide');
        row.find('input.customswitch').bootstrapSwitch('disabled', true);
        ComponentsPickers.init();
        row.find(".form_datetime").datetimepicker('disable');
        row.find(".input-group-btn").hide();
    }

    function newRowEnableOnClick(newrow)
    {
        disableRow(newrow);
        // Emfanizw ta data tou tr.      
        newrow.find('div.tools a.expand').trigger('click');
        // Skrolarw sto portlet me ta data.
        Metronic.scrollTo(newrow.find('div.portlet.light.bordered'), -120);
        // Vazw listener sto koumpi edit, save, cancel.
        newrow.find('a.custom-edit-class').on('click', function () {
            // Me to patima pernw to active tab content (html) kai to kanw editable2.
            var tab = $(this).closest('div.portlet').find('div.tab-pane.active');
            var nav_tab = $(this).closest('div.portlet-title').find('ul.nav.nav-tabs');
            var edit = $(this);
            var save = $(this).closest('div.actions').find('a.custom-save-class');
            var close = $(this).closest('div.actions').find('a.custom-cancel-class');

            // Vgazw ta readonly kai ta disable se data-pickers kai checkbox.
            enableForm(tab, nav_tab);



            // Emfanizw kai krivo ta buttons.
            var time = 0;
            edit.fadeOut(time);
            Metronic.blockUI({
                target: nav_tab,
                overlayColor: "black",
                textOnly: true,
                message: " "
            });
            save.fadeIn(time).on('click', function () {
                alert("Go for save ajax...");
                save.fadeOut(time).off('click');
                close.fadeOut(time).off('click');
                edit.fadeIn(time);
                disableForm(tab, nav_tab);

            });
            close.fadeIn(time).on('click', function () {
                var id = $(this).attr('id');
                var lngid = $(this).attr('lngid');
                var tr = $('#tr_details_' + id + '_' + lngid);
                var alertdivid = '#bootstrap_alert_' + id + '_' + lngid;
                var trprev = tr.prev();
                getData2(lngid, id, function (data) {
                    tr.remove();
                    trprev.after(data.tr);
                    tr = $('#' + data.tr_id);
                    newRowEnableOnClick(tr);
                    handleActionRowTab(alertdivid, 'The operation has been canceled succesfully!!!');
                    //alert('Cancel Completed!!!');
                });

                //save.fadeOut(time).off('click');
                //close.fadeOut(time).off('click');
                //edit.fadeIn();
            });
            /*// Arxikopoiw ta date pickers.
             $('#'+data.tr_id).find('.date-picker').datepicker({
             format: "yyyy-mm-dd",
             rtl: Metronic.isRTL(),
             autoclose: true
             });
             // Arxikopoiw ta time pickers.
             $('#'+data.tr_id).find('.timepicker-24').timepicker({
             autoclose: true,
             minuteStep: 1,
             showSeconds: false,
             showMeridian: false
             });
             
             // Arxikopoiw ta masks.
             $('#'+data.tr_id).find(".mask_number").inputmask({
             "mask": "9",
             "repeat": 10,
             "greedy": false
             });  */

        });

        Metronic.initAjax();

    }

    var grid;
    var table_list;
    var TableAjax = function () {


        var initPickers = function () {
            //init date pickers
            $('.date-picker').datepicker({
                rtl: Metronic.isRTL(),
                autoclose: true
            });
        }


        var handleRecords = function (mainurl) {
            
            grid = new Datatable();
            table_list = $('#datatable_ajax');
            var gridinitparams = {
                src: table_list,
                exporturlexcel: '<?php echo MyCustomHelperPages::makePage($mainurl_for_data, array('param2' => $di->controller_params_array['settings']['Export_To_Excel'])); ?>',
                exporturlpdf: '<?php echo MyCustomHelperPages::makePage($mainurl_for_data, array('param2' => $di->controller_params_array['settings']['Export_To_Pdf'])); ?>',
                exporturlcsv: '<?php echo MyCustomHelperPages::makePage($mainurl_for_data, array('param2' => $di->controller_params_array['settings']['Export_To_Csv'])); ?>',
                exporturlxml: '<?php echo MyCustomHelperPages::makePage($mainurl_for_data, array('param2' => $di->controller_params_array['settings']['Export_To_Xml'])); ?>',
                onSuccess: function (grid) {
                    // execute some code after table records loaded
                },
                onError: function (grid) {
                    // execute some code on network or other general error  
                },
                loadingMessage: 'Loading...',
                dataTable: {
                    // here you can define a typical datatable settings from http://datatables.net/usage/options 
                    // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                    // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/scripts/datatable.js). 
                    // So when dropdowns used the scrollable div should be removed. 
                    //"dom": "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",
                    "bStateSave": false,
                    // save datatable state(pagination, sort, etc) in cookie.
                    //Pan Pan start fix confirmation  11/06/2015
                    fnDrawCallback: function () {
                        executeIfFunctionExist('handleBootstrapConfirmation');
                        UIGeneral.init();
                    },
                    //Pan Pan end fix confirmation  11/06/2015
                    //aoColumns : myaoColumns,
                    "lengthMenu": [
                        [<?php echo $di->controller_params_array['viewarr']['lengthmenukeys']; ?>],
                        [<?php echo $di->controller_params_array['viewarr']['lengthmenuvalues']; ?>] // change per page values here
                    ],
                    "pageLength": <?php echo $di->controller_params_array['viewarr']['pagelength']; ?>, // default record count per page
                    "ajax": {
                        "url": "<?php echo MyCustomHelperPages::makePage($mainurl_for_data, array('param2' => $di->controller_params_array['settings']['Action_View'])); ?>", // ajax source
                    },
                    "order": [
                        [<?php echo $di->controller_params_array['viewarr']['col']; ?>, "<?php echo $di->controller_params_array['viewarr']['sort']; ?>"]
                    ] // set first column as a default sort by asc
                }
            };
            if (typeof myaoColumns !== 'undefined')
            {
                gridinitparams["dataTable"]["aoColumns"] = myaoColumns;
            }
            grid.init(gridinitparams);

            // handle group actionsubmit button click
            grid.getTableWrapper().on('click', '.table-group-action-submit', function (e) {
                e.preventDefault();
                var action = $(".table-group-action-input", grid.getTableWrapper());
                if (action.val() != "" && grid.getSelectedRowsCount() > 0) {
                    grid.setAjaxParam("customActionType", "group_action");
                    grid.setAjaxParam("customActionName", action.val());
                    grid.setAjaxParam("id", grid.getSelectedRows());
                    grid.getDataTable().ajax.reload();
                    grid.clearAjaxParams();
                } else if (action.val() == "") {
                    Metronic.alert({
                        type: 'danger',
                        icon: 'warning',
                        message: 'Please select an action',
                        container: grid.getTableWrapper(),
                        place: 'prepend'
                    });
                } else if (grid.getSelectedRowsCount() === 0) {
                    Metronic.alert({
                        type: 'danger',
                        icon: 'warning',
                        message: 'No record selected',
                        container: grid.getTableWrapper(),
                        place: 'prepend'
                    });
                }
            });
        }
        var handleEvents = function () {
            // To event gia to click tou ( + ) to pianw edw.
            var table_group = grid.getTable();
            table_group.find('.date-picker').datepicker({
                rtl: Metronic.isRTL(),
                autoclose: true
            });
            table_group.on('click', ' tbody td .row-details', function () {

                var trgrid = $(this).closest('tr');
                // An exei class row-details-close tote prepei na to anoiksw.
                if ($(this).hasClass('row-details-close')) {
                    // Edw to kleinw.
                    // Prwta vgazw to class close kai vazw to open
                    $(this).removeClass('row-details-close').addClass('row-details-open');

                    // Pernw ta data gia to row , stin sinartisi stelnw to id, kai san callback
                    // exw ta data.
                    getData2($(this).attr('lngid'), $(this).attr('id'), function (data) {
                        var id = $(this).attr('id');
                        var lngid = $(this).attr('lngid');
                        var portlet = $('#portlet_details_' + id + '_' + lngid);
                        var portlettitle = $('#portlet_details_title_' + id + '_' + lngid);

                        trgrid.after(data.tr); // Vazw ta data
                        tr = $('#' + data.tr_id);
                        newRowEnableOnClick(tr);
                    });

                }
                // An exei class row-details-open tote prepei na to kleisw.
                else if ($(this).hasClass('row-details-open')) {
                    tr = $('#tr_details_' + $(this).attr('id') + '_' + $(this).attr('lngid'));
                    // Edw to anoigw.
                    // Prwta vgazw to class x-x-open kai vazw to x-x-close
                    $(this).removeClass('row-details-open').addClass('row-details-close');
                    if (tr.hasClass('details')) {
                        tr.fadeOut(350, function () {
                            tr.remove();
                        });
                        Metronic.scrollTo(tr);
                    }
                }
                // Edw exei kati allo. (TODO: Na kanw swsto troubleshoot.
                else {

                }
            });

        }
        return {
            //main function to initiate the module
            init: function () {
                initPickers();
                handleRecords();
                handleEvents();
            }
        };

    }();
//</script>